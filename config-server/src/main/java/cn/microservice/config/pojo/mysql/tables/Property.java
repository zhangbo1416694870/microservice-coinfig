/*
 * This file is generated by jOOQ.
*/
package cn.microservice.config.pojo.mysql.tables;


import cn.microservice.config.pojo.mysql.Keys;
import cn.microservice.config.pojo.mysql.SignitConfig;
import cn.microservice.config.pojo.mysql.tables.records.PropertyRecord;
import cn.microservice.config.utils.DateConverter;

import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Property extends TableImpl<PropertyRecord> {

    private static final long serialVersionUID = -1946431584;

    /**
     * The reference instance of <code>signit_config.property</code>
     */
    public static final Property PROPERTY = new Property();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PropertyRecord> getRecordType() {
        return PropertyRecord.class;
    }

    /**
     * The column <code>signit_config.property.id</code>. 数据库自增id
     */
    public final TableField<PropertyRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "数据库自增id");

    /**
     * The column <code>signit_config.property.application</code>.
     */
    public final TableField<PropertyRecord, String> APPLICATION = createField("application", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>signit_config.property.profile</code>.
     */
    public final TableField<PropertyRecord, String> PROFILE = createField("profile", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>signit_config.property.label</code>.
     */
    public final TableField<PropertyRecord, String> LABEL = createField("label", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>signit_config.property.property</code>.
     */
    public final TableField<PropertyRecord, String> PROPERTY_ = createField("property", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>signit_config.property.version</code>.
     */
    public final TableField<PropertyRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>signit_config.property.active</code>.
     */
    public final TableField<PropertyRecord, Boolean> ACTIVE = createField("active", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>signit_config.property.created_datetime</code>. 创建时间
     */
    public final TableField<PropertyRecord, Date> CREATED_DATETIME = createField("created_datetime", org.jooq.impl.SQLDataType.TIMESTAMP, this, "创建时间", new DateConverter());

    /**
     * The column <code>signit_config.property.modified_datetime</code>. 修改时间
     */
    public final TableField<PropertyRecord, Date> MODIFIED_DATETIME = createField("modified_datetime", org.jooq.impl.SQLDataType.TIMESTAMP, this, "修改时间", new DateConverter());

    /**
     * Create a <code>signit_config.property</code> table reference
     */
    public Property() {
        this("property", null);
    }

    /**
     * Create an aliased <code>signit_config.property</code> table reference
     */
    public Property(String alias) {
        this(alias, PROPERTY);
    }

    private Property(String alias, Table<PropertyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Property(String alias, Table<PropertyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SignitConfig.SIGNIT_CONFIG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PropertyRecord, Long> getIdentity() {
        return Keys.IDENTITY_PROPERTY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PropertyRecord> getPrimaryKey() {
        return Keys.KEY_PROPERTY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PropertyRecord>> getKeys() {
        return Arrays.<UniqueKey<PropertyRecord>>asList(Keys.KEY_PROPERTY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Property as(String alias) {
        return new Property(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Property rename(String name) {
        return new Property(name, null);
    }
}
